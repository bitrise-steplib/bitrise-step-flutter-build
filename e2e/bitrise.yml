format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - SAMPLE_APP_URL: https://github.com/bitrise-io/Bitrise-Flutter-Sample.git
  - SAMPLE_APP_BRANCH: e2e-test
  - ORIGIN_SOURCE_DIR: $BITRISE_SOURCE_DIR

  # secrets
  - BITRISE_KEYCHAIN_PATH: $BITRISE_KEYCHAIN_PATH
  - BITRISE_KEYCHAIN_PASSWORD: $BITRISE_KEYCHAIN_PASSWORD
  - BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST: $BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST
  - BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST: $BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST
  - BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST: $BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST

workflows:
  test_ios_archive:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail

            if [[ $XCODE_AVAILABLE == false ]] || [[ $XCODE_MAJOR_VERSION -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi

            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"
    - bitrise-run:
        run_if: |-
          {{ enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true" }}
        inputs:
        - workflow_id: utility_test_ios_archive
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_ios_archive:
    before_run:
    - _setup_test
    steps:
    - certificate-and-profile-installer:
        inputs:
        - certificate_url: $BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST
        - certificate_passphrase: $BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST
        - provisioning_profile_url: $BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST
        - install_defaults: "no"
        - keychain_path: $BITRISE_KEYCHAIN_PATH
        - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    - path::./:
        inputs:
        - platform: ios
        - ios_output_type: archive
    - git::https://github.com/bitrise-steplib/bitrise-step-check-step-outputs.git@main:
        title: Check step outputs
        inputs:
        - envs:
        - files:
        - dirs: |-
            BITRISE_XCARCHIVE_PATH
        - deploy_dir: $BITRISE_DEPLOY_DIR
        - deployed_files: |-
            BITRISE_XCARCHIVE_ZIP_PATH
        - deployed_dirs:
    - script:
        title: Check exported xcarchive zip
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            if [ ! -f $BITRISE_DEPLOY_DIR/Runner.xcarchive.zip ]; then
              echo "$BITRISE_DEPLOY_DIR/Runner.xcarchive.zip doesn't exist"
              exit 1
            fi

  test_ios:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail

            if [[ $XCODE_AVAILABLE == false ]] || [[ $XCODE_MAJOR_VERSION -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi

            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"
    - bitrise-run:
        run_if: |-
          {{ enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true" }}
        inputs:
        - workflow_id: utility_test_ios
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_ios:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - is_debug_mode: "true"
        - platform: ios

  test_android_apk:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - is_debug_mode: "true"
        - platform: android

  test_android_split_apk:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - android_additional_params: --release --split-per-abi
        - is_debug_mode: "true"
        - platform: android

  test_android_aab:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - is_debug_mode: "true"
        - platform: android
        - android_output_type: appbundle

  test_both:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail

            if [[ $XCODE_AVAILABLE == false ]] || [[ $XCODE_MAJOR_VERSION -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi

            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"
    - bitrise-run:
        run_if: |-
          {{ enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true" }}
        inputs:
        - workflow_id: utility_test_both
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_both:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - is_debug_mode: "true"
        - platform: both

  test_cache:
    envs:
    - BITRISE_CACHE_API_URL: file:///$ORIGIN_SOURCE_DIR/_cache.tar.gz
    before_run:
    - _setup_test
    steps:
    - script:
        inputs:
        - content: |-
            rm -rf $HOME/.pub-cache
    - cache-pull:
        run_if: "true"
    - path::./:
        inputs:
        - is_debug_mode: "true"
        - platform: android
        - android_output_type: apk
        - android_additional_params: ""
        - cache_level: all
    - cache-push:
        run_if: "true"
    - script:
        inputs:
        - content: |-
            rm -rf $HOME/.pub-cache
    - cache-pull:
        run_if: "true"
    - path::./:
        inputs:
        - is_debug_mode: "true"
        - platform: android
        - android_output_type: apk
        - android_additional_params: ""
        - cache_level: all

  test_additional_build_params_android:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - additional_build_params: --split-per-abi
        - platform: android
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail
            apk_count=$(echo $BITRISE_APK_PATH_LIST | sed 's/|/\n/g' | wc -w)
            if [ $apk_count -eq 1 ]; then
              echo "Got 1 exported APK but more were expected because --split-per-abi was specified."
              exit 1
            fi

  test_additional_build_params_ios:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail

            if [[ $XCODE_AVAILABLE == false ]] || [[ $XCODE_MAJOR_VERSION -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi

            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"
    - bitrise-run:
        run_if: |-
          {{ enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true" }}
        inputs:
        - workflow_id: utility_test_additional_build_params_ios
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_additional_build_params_ios:
    before_run:
    - _setup_test
    steps:
    - path::./:
        inputs:
        - additional_build_params: --build-number 123456789
        - platform: ios
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail
            plutil -convert xml1 $BITRISE_APP_DIR_PATH/Info.plist
            grep -e "123456789" $BITRISE_APP_DIR_PATH/Info.plist
            if [ $? -eq 1 ]; then
              echo "Build number 123456789 was not found in Info.plist."
              exit 1
            fi

  _expose_xcode_version:
    steps:
    - script:
        title: Expose Xcode major version
        inputs:
        - content: |-
            #!/bin/bash
            set -eo pipefail
            envman add --key XCODE_AVAILABLE --value false
            if [[ ! -z "$XCODE_MAJOR_VERSION" ]]; then
              echo "Xcode major version already exposed: $XCODE_MAJOR_VERSION"
              exit 0
            fi
            if ! command -v xcodebuild &> /dev/null; then
                echo "Xcode is not available."
                exit 0
            fi
            version=`xcodebuild -version`
            regex="Xcode ([0-9]*)."
            if [[ ! $version =~ $regex ]]; then
              echo "Failed to determine Xcode major version"
              exit 1
            fi
            xcode_major_version=${BASH_REMATCH[1]}
            echo "Xcode major version: $xcode_major_version"
            envman add --key XCODE_AVAILABLE --value true
            envman add --key XCODE_MAJOR_VERSION --value $xcode_major_version

  _setup_test:
    steps:
    - script:
        title: Remove _tmp dir
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            cd ${ORIGIN_SOURCE_DIR}
            rm -rf "./_tmp"
            mkdir "_tmp"
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: "true"
        inputs:
        - path: ${ORIGIN_SOURCE_DIR}/_tmp
        - is_create_path: true
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        title: Clone sample app
        inputs:
        - repository_url: $SAMPLE_APP_URL
        - clone_into_dir: ./
        - branch: $SAMPLE_APP_BRANCH
    - flutter-installer:
        inputs:
        - version: 3.7.12
        - is_update: "false"
